{
  "output_filename": "reports/service-deps",
  "output_format": "json",
  "description": "Service dependencies",
  "query": "select
          dev.device_pk,
          dev.name listener_name,
          spip.ip listener_ip,
          (SELECT array_to_string(array(
                  select ip.ip_address
                  from view_ipaddress_v1 ip
                  where ip.device_fk = dev.device_pk),
                  '; ')) all_listener_device_ips,
          srv.service_name listener_service,
          sp.port listener_port,
          os.name listener_os,
          CASE dev.type_id
            WHEN 3 THEN 'yes'
            ELSE 'no'
          END listener_is_virtual,
          coalesce(hdw.name, '') listener_hardware,
          coalesce(cdev.name, 'N/A') client_name,
          sprip.ip client_ip,
          coalesce(csrv.service_name, 'N/A') client_service,
          coalesce(cos.name, '') client_os,
          CASE coalesce(cdev.type_id, -1)
            WHEN -1 THEN ''
            WHEN 3 THEN 'yes'
            ELSE 'no'
          END client_is_virtual,
          coalesce(chdw.name, '') client_hardware,
          sprips.type client_stat_type,
          sprips.client_connection_first_found,
          sprips.client_connection_last_found,
          sprips.total_client_connections_detected,
          CASE
            WHEN sprips.total_spans > 0 AND sprips.total_client_connections_detected > 0 THEN (sprips.total_spans / sprips.total_client_connections_detected)
            ELSE NULL
          END all_average,
          CASE
            WHEN sprips.total_ports  > 0 AND sprips.counted_port_times > 0 THEN  (sprips.total_ports / sprips.counted_port_times)
            ELSE NULL
          END average_eports,
          (select count(*) from regexp_matches(sprips.latest_contiguous_ports, '\\d+', 'g') x) current_connections,
          sprips.latest_contiguous_connection_first_found,
          sprips.latest_contiguous_connection_last_found,
          sprips.latest_contiguous_connections_detected,
          CASE
            WHEN sprips.latest_contiguous_connection_total_spans> 0 AND sprips.latest_contiguous_connections_detected > 0 THEN (sprips.latest_contiguous_connection_total_spans / sprips.latest_contiguous_connections_detected)
            ELSE NULL
          END current_average
          from view_serviceport_v1 sp
          join view_serviceportip_v1 spip on spip.serviceport_fk = sp.serviceport_pk
          join view_serviceportremoteip_v1 sprip on sprip.serviceportip_fk = spip.serviceportip_pk
          join view_device_v1 dev on dev.device_pk = sp.device_fk
          join view_serviceinstance_v1 sd on sd.serviceinstance_pk = spip.mapped_serviceinstance_fk
          join view_service_v1 srv on srv.service_pk = sd.service_fk
          left join view_os_v1 os on os.os_pk = dev.os_fk
          left join view_hardware_v1 hdw on hdw.hardware_pk = dev.hardware_fk
          left join view_ipaddress_v1 ip on ip.ip_address = sprip.ip
          left join view_device_v1 cdev on cdev.device_pk = ip.device_fk
          left join view_os_v1 cos on cos.os_pk = cdev.os_fk
          left join view_hardware_v1 chdw on chdw.hardware_pk = cdev.hardware_fk
          left join view_serviceport_v1 csp on csp.device_fk = cdev.device_pk and csp.port = sp.port
          left join view_serviceportip_v1 cspip on cspip.serviceport_fk = csp.serviceport_pk and cspip.is_listening = 'f'
          left join view_serviceinstance_v1 csd on csd.serviceinstance_pk = cspip.mapped_serviceinstance_fk
          left join view_service_v1 csrv on csrv.service_pk = csd.service_fk
          left join view_serviceportremoteipstats_v1 sprips on sprips.serviceportremoteip_fk = sprip.serviceportremoteip_pk
          where spip.is_listening = 't' and srv.service_type <> 'ignored' and (csrv.service_type is null or csrv.service_type <> 'ignored')
          order by sprip.serviceportremoteip_pk",
  "limit": null,
  "offset": 1000,
  "date": {  
    "column": null,
    "days_limit": null
  }
}
